services:
  postgres:
    image: postgres:17-alpine
    container_name: ${DBMANAGER_DB_HOST}
    restart: unless-stopped
    ports:
      - "5432:5432"  # Expose PostgreSQL on port 5432 for external access
    environment:
    - POSTGRES_DB=${DBMANAGER_DB_NAME}
    - POSTGRES_USER=${DBMANAGER_DB_USER}
    - POSTGRES_PASSWORD=${DBMANAGER_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dbmanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DBMANAGER_DB_USER} -d ${DBMANAGER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dbmanager-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - dbmanager-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: dbmanager/api:${VERSION:-latest}
    container_name: dbmanager-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CONFIG_PATH=/etc/dbmanager/config.yaml
      - API_ADDRESS=${API_ADDRESS:-:8082}
      - DBMANAGER_DB_HOST=${DBMANAGER_DB_HOST:-user-db}
      - DBMANAGER_DB_PORT=${DBMANAGER_DB_PORT:-5432}
      - DBMANAGER_DB_NAME=${DBMANAGER_DB_NAME:-dbmanager_users}
      - DBMANAGER_DB_USER=${DBMANAGER_DB_USER:-dbmanager_admin}
      - DBMANAGER_DB_PASSWORD=${DBMANAGER_DB_PASSWORD}
      - INIT_ADMIN=${INIT_ADMIN:-false}
      - REDIS_HOST=${REDIS_HOST:-redis-session}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE:-28800}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECURE_COOKIES=${SECURE_COOKIES:-true}
      - SYSTEM_BASE_URL=${SYSTEM_BASE_URL:-http://localhost}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - /dev/null:/app/config.yaml:ro  # Override any embedded config.yaml
    networks:
      - dbmanager-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: dbmanager-nginx
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro  # Uncomment if using SSL
      - nginx_logs:/var/log/nginx
    networks:
      - dbmanager-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  dbmanager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
